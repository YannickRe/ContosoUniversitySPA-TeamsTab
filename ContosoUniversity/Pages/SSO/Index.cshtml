@page
@model IndexModel
@{ ViewData["Title"] = "Contoso University SSO Authentication"; }

<h1>@ViewData["Title"]</h1>

<div id="divError" style="display: none"></div>
<button onclick="requestConsent()" id="consent" style="display:none;">Authenticate</button>

@section Scripts {
    <script>
        let accessToken;

        $(document).ready(function () {
            microsoftTeams.initialize();

            getClientSideToken()
                .then((clientSideToken) => {
                    console.log("it worked:" + clientSideToken);
                    microsoftTeams.appInitialization.notifySuccess("", "");
                    return;
                })
                .catch((error) => {
                    console.log(error);
                    if (error === "invalid_grant") {
                        // Display in-line button so user can consent
                        $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                        $("#divError").show();
                        $("#consent").show();
                    } else {
                        // Something else went wrong
                    }
                });
        });

        function requestConsent() {
            getToken()
                .then(data => {
                $("#consent").hide();
                $("#divError").hide();
                accessToken = data.accessToken;
                microsoftTeams.getContext((context) => {
                    getUserInfo(context.userPrincipalName);
                });
            });
        }

        function getToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.authenticate({
                    url: window.location.origin + "/Auth/Start",
                    width: 600,
                    height: 535,
                    successCallback: result => {

                        resolve(result);
                    },
                    failureCallback: reason => {

                        reject(reason);
                    }
                });
            });
        }

        function getClientSideToken() {

            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.getAuthToken({
                    successCallback: (result) => {
                        resolve(result);
                    },
                    failureCallback: function (error) {
                        reject("Error getting token: " + error);
                    }
                });

            });

        }
    </script>
}